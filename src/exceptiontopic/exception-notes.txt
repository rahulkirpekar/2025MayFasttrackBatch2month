Exception:- Abnormal Scenario---code crashed---raise exception
----------
	statement-----1
	statement-----2
	statement-----3
	statement-----4 
	statement-----5---raise exception---code crashed---app crashed
	statement-----6
	statement-----7
	statement-----8
	statement-----9
	statement-----10
-------------------------------------------------------------------------------------
	1) no1 =10;
	   no2 = 0;

	   ans = no1 / no2;// ArithmeticException---class--code crashed
	------------------------------
	2)
	String name = null;
	SOP(name.length());// NullpointerException
	------------------------------
	3) 
		int a[] = new int[5];// a[0],a[1],a[2],a[3],a[4]
		a[5] = 100;// ArrayIndexoutofBoundException
	------------------------------
	4) 
		//	       01234	
		String name = "royal";
		SOP(name.charAt(5));//StringIndexoutofBoundException
	------------------------------
	5) 
		String value = "a1z2";
		int no1 = Integer.parseInt(value);// NumberFormateException
	------------------------------
	6)
			A
			|	
		------------------
		|		|
		B		C
	A objA = new B();
	
	C objC = (C)objA;// ClassCastException

-------------------------------------------------------------------------------------
Type of Exception:-
------------------
	1) Checked Exception			2) Un-Checked Exception
	--------------------			------------------------
		|					|
	CompileTime--Compiler			    Jvm--Runtime
------------------------------------------------------------------------------------------------------------------
				Hierarchy of Exception
				-----------------------

					Throwable(Class)
					   |
					Exception(Class)
					   |
		-----------------------------------------------------------------
		|--CheckException						|
----IOException								   RuntimeException(class)	
----SQLException								|-UnChecked Exception
----FileNotFoundException					--ArithmeticException		
----..								--ArrayIndexoutofBoundException
								--ClasscstException
								--NullPointerException
								--StringIndexoutofBoundException
								--NumberFormatException
								--InteruptedException
								--IllegalThreadstateException
------------------------------------------------------------------------------------------------------------------

Exception Handling:-
---------------------

		try
		{
			// code By raise exception ---ArrayIndexoutofBoundException
		}
		catch(ArrayIndexoutofBoundException e)
		{

		}
--------------------------------------------

		1) multiple catch block
		2) Nested try..catch block


		3) finally block with try...catch
		4) finally block with try...with..multiple..catch
		5)
			ways to define try..catch...finally block

	
			try
			{	

			}catch()
			{

			}finally
			{

			}
--------------------------------------
			try
			{	
			}catch()
			{
			}catch()
			{
			}finally
			{
			}

--------------------------------------
			try
			{	
				try
				{
				}catch()
				{
				}finally
				{
				}
			}catch()
			{
				try
				{
				}catch()
				{
				}finally
				{
				}
			}catch()
			{
			}finally
			{
			}
--------------------------------------
			try
			{	

			}finally
			{

			}
--------------------------------------------------------------------------------
	1. throw
	2. throws
	3. custom exception
		1. checked(Compiletime) Exception
		2. Unchecked(Runtime) Exception
	4. method overridding with exception






Rule 1: If the method in the superclass does not declare any exception, the overridden method in the subclass cannot declare checked exceptions.


Rule 2: If the method in the superclass does not declare any exception, the overridden method in the subclass cannot declare checked exceptions, although it can declare unchecked exceptions.
















		6) throw
		7) throws
		8) custom Exception





Here are the rules of method overriding with exceptions in Java:

---

 ✅ 1. Checked Exceptions:

* If the superclass method throws a checked exception, then the subclass overridden method:

  * Can throw the same exception.
  * Can throw a subclass of that exception.
  * Cannot throw a broader (superclass) exception.
  * Cannot throw a new checked exception that is not declared in the superclass method.

# 📌 Example:

java
class Parent {
    void show() throws IOException {
        System.out.println("Parent show");
    }
}

class Child extends Parent {
    // Valid - throws same exception
    void show() throws IOException {
        System.out.println("Child show");
    }

    // Valid - throws subclass of IOException
    // void show() throws FileNotFoundException {}

    // Invalid - throws broader exception
    // void show() throws Exception {}
}


---

 ✅ 2. Unchecked Exceptions:

* If the superclass method does not throw any exception, the subclass can throw unchecked exceptions (i.e., subclasses of `RuntimeException`).

* There is no restriction on throwing unchecked exceptions in overriding methods.

# 📌 Example:

java
class Parent {
    void display() {
        System.out.println("Parent display");
    }
}

class Child extends Parent {
    // Valid - throws unchecked exception
    void display() throws ArithmeticException {
        System.out.println("Child display");
    }
}


---

 ❌ 3. Cannot throw new Checked Exceptions:

* If the superclass method does not declare a checked exception, then the subclass cannot throw any new checked exceptions.

# ❌ Example (Invalid):

java
class Parent {
    void print() {
        System.out.println("Parent print");
    }
}

class Child extends Parent {
    // Invalid - throws checked exception not declared in parent
    // void print() throws IOException {}  ❌
}


---

 ✅ Summary Table:

| Superclass throws   | Subclass can throw      |
| ------------------- | ----------------------- |
| No exception        | Unchecked only          |
| Checked exception   | Same or subclass only   |
| Unchecked exception | Any unchecked exception |

Exception Handling with Method Overriding in Java


1) If the superclass method does not declare an exception, 
	subclass overridden method cannot declare the checked exception 
	but it can declare unchecked exception.


2) If the superclass method declares an exception, 
	==>subclass overridden method can declare same, 
	==>subclass exception 
	==>or no exception 
	==>but cannot declare parent exception.
