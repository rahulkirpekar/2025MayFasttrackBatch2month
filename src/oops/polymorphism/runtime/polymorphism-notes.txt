Polymorphism :- Ability to take more than one form(method)
----------------

			Type of Polymorphism
			----------------------
1) Compiletime				2) Runtime
---------------				---------------
==> static Binding			==> Dynamic Binding
==> Ealry Binding			==> Late Binding
-----------------------			-----------------------
Example:-			Example:-
---------			---------
	==>Method Overloadding		==>Method Overridding

2) Runtime Polymorphism:-
-------------------------

				Person(void getBehave(){---Human..})
				  |
	-------------------------------------------------------------------------
	|			|			|			|			
       Home		    PublicPlace		      School		       Org	
void getBehave()      void getBehave()		void getBehave()	void getBehave()	
{		      {				{			{	
     Son/Daughter	  Citizen			Student			Employee
}		      }				}			}


Person person = new Home();
       person.getBehave();


	person = new PublicPlace();
        person.getBehave();



person = new School();
        person.getBehave();


person = new Org();
        person.getBehave();







	✅ What is Method Overriding?
	
	===> Method Overriding occurs when a subclass provides a specific implementation of a method that is already defined in its superclass.


📜 Rules of Method Overriding
********************************

	1. Method Signature Must Be Same
	
		===> The method name, return type, and parameter list must be exactly the same as in the parent class.
		
	class Parent {
	    void show() {}
	}
	class Child extends Parent {
	    void show() {} // Valid override
	}

	2. Access Modifier Cannot Be More Restrictive
		===> The overriding method cannot have a more restrictive access modifier than the method in the superclass.

		| Superclass Modifier | Valid Override Modifiers       |
		| ------------------- | ------------------------------ |
		| `public`            | `public`                       |
		| `protected`         | `protected`, `public`          |
		| default (package)   | default, `protected`, `public` |
		
	class Parent {
	    protected void display() {}
	}
	class Child extends Parent {
	    public void display() {} // Valid
	}

	3. Final Methods Cannot Be Overridden
		===> A method declared as final cannot be overridden.

		class Parent {
		    final void test() {}
		}
		class Child extends Parent {
		    // void test() {} // ❌ Compile-time error
		}

	4. Static Methods Cannot Be Overridden
		===> static methods are class-level, not instance-level, and cannot be overridden, only hidden.

		class Parent {
		    static void greet() {}
		}
		class Child extends Parent {
		    static void greet() {} // Hiding, not overriding
		}
		
	5. Constructors Cannot Be Overridden
		===> Constructors are not inherited, so they cannot be overridden.

	6. Overriding Method Can Throw Fewer or Narrower Exceptions
		===> The overriding method cannot throw broader checked exceptions than the overridden method.

		class Parent 
		{
		    void show() throws IOException {}
		}
		class Child extends Parent 
		{
		    void show() throws FileNotFoundException {} // ✅ Valid, narrower exception
		}

	7. Return Type Rules (Covariant Return Types)
		===> The overriding method can return a subtype (child type) of the return type of the overridden method.
	
		class Parent {
		    Number getValue() { return 1; }
		}
		class Child extends Parent {
		    Integer getValue() { return 2; } // ✅ Valid (Integer is a subtype of Number)
		}
		
	8. Private Methods Cannot Be Overridden
		===> private methods are not inherited, so they cannot be overridden.
		
	9. Use of @Override Annotation (Optional but Recommended)
		===> Using @Override helps catch errors during compilation if the method is not properly overriding a superclass method.	
		@Override
		void show() {
		    // Custom implementation
		}
-----------------------------------------------------------------------------------------------------------------
	Task:-



				RbiBank(int getRoi()--0)
				  |
	-------------------------------------------------------------------------
	|			  |			|			|
    AxisBank	 		SbiBank		  KotakBank  		    HdfcBank	
int getRoi()--12              int getRoi()--8    int getRoi()--12          int getRoi()---11	
		
		